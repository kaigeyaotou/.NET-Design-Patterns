//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v11.17.3.0 (NJsonSchema v9.10.46.0 (Newtonsoft.Json v9.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

namespace Lunz.ProductCenter.Clients
{
#pragma warning disable // Disable all warnings

	[System.CodeDom.Compiler.GeneratedCode("NSwag", "11.17.3.0 (NJsonSchema v9.10.46.0 (Newtonsoft.Json v9.0.0.0))")]
	public partial class OrdersClient
	{
		private string _baseUrl = "http://microsertemplate.m.lunztech.cn";
		private System.Lazy<Newtonsoft.Json.JsonSerializerSettings> _settings;

		public OrdersClient()
		{
			_settings = new System.Lazy<Newtonsoft.Json.JsonSerializerSettings>(() =>
			{
				var settings = new Newtonsoft.Json.JsonSerializerSettings { PreserveReferencesHandling = Newtonsoft.Json.PreserveReferencesHandling.All };
				UpdateJsonSerializerSettings(settings);
				return settings;
			});
		}

		public string BaseUrl
		{
			get { return _baseUrl; }
			set { _baseUrl = value; }
		}

		protected Newtonsoft.Json.JsonSerializerSettings JsonSerializerSettings { get { return _settings.Value; } }

		partial void UpdateJsonSerializerSettings(Newtonsoft.Json.JsonSerializerSettings settings);
		partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, string url);
		partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, System.Text.StringBuilder urlBuilder);
		partial void ProcessResponse(System.Net.Http.HttpClient client, System.Net.Http.HttpResponseMessage response);

		/// <summary>获取订单列表。</summary>
		/// <param name="filter">过滤条件</param>
		/// <param name="pageIndex">页号，如 1</param>
		/// <param name="pageSize">每页行数，如 10</param>
		/// <param name="sort">排序规则</param>
		/// <returns>返回订单列表。</returns>
		/// <exception cref="SwaggerException">A server side error occurred.</exception>
		public System.Threading.Tasks.Task<Response> GetAsync(QueryGroup filter, int? pageIndex, int? pageSize, System.Collections.Generic.IEnumerable<PagingSort> sort)
		{
			return GetAsync(filter, pageIndex, pageSize, sort, System.Threading.CancellationToken.None);
		}

		/// <summary>获取订单列表。</summary>
		/// <param name="filter">过滤条件</param>
		/// <param name="pageIndex">页号，如 1</param>
		/// <param name="pageSize">每页行数，如 10</param>
		/// <param name="sort">排序规则</param>
		/// <returns>返回订单列表。</returns>
		/// <exception cref="SwaggerException">A server side error occurred.</exception>
		/// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
		public async System.Threading.Tasks.Task<Response> GetAsync(QueryGroup filter, int? pageIndex, int? pageSize, System.Collections.Generic.IEnumerable<PagingSort> sort, System.Threading.CancellationToken cancellationToken)
		{
			var urlBuilder_ = new System.Text.StringBuilder();
			urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/v1/orders?");
			if (filter != null) urlBuilder_.Append("filter=").Append(System.Uri.EscapeDataString(ConvertToString(filter, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
			if (pageIndex != null) urlBuilder_.Append("pageIndex=").Append(System.Uri.EscapeDataString(ConvertToString(pageIndex, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
			if (pageSize != null) urlBuilder_.Append("pageSize=").Append(System.Uri.EscapeDataString(ConvertToString(pageSize, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
			if (sort != null) foreach (var item_ in sort) { urlBuilder_.Append("sort=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
			urlBuilder_.Length--;

			var client_ = new System.Net.Http.HttpClient();
			try
			{
				using (var request_ = new System.Net.Http.HttpRequestMessage())
				{
					request_.Method = new System.Net.Http.HttpMethod("GET");
					request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));

					PrepareRequest(client_, request_, urlBuilder_);
					var url_ = urlBuilder_.ToString();
					request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
					PrepareRequest(client_, request_, url_);

					var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
					try
					{
						var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
						if (response_.Content != null && response_.Content.Headers != null)
						{
							foreach (var item_ in response_.Content.Headers)
								headers_[item_.Key] = item_.Value;
						}

						ProcessResponse(client_, response_);

						var status_ = ((int)response_.StatusCode).ToString();
						if (status_ == "400")
						{
							var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							var result_ = default(System.Collections.ObjectModel.ObservableCollection<string>);
							try
							{
								result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<System.Collections.ObjectModel.ObservableCollection<string>>(responseData_, _settings.Value);
							}
							catch (System.Exception exception_)
							{
								throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
							}
							throw new SwaggerException<System.Collections.ObjectModel.ObservableCollection<string>>("\u53c2\u6570\u65e0\u6548\u3002", (int)response_.StatusCode, responseData_, headers_, result_, null);
						}
						else
						if (status_ == "200")
						{
							var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							var result_ = default(Response);
							try
							{
								result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Response>(responseData_, _settings.Value);
								return result_;
							}
							catch (System.Exception exception_)
							{
								throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
							}
						}
						else
						if (status_ != "200" && status_ != "204")
						{
							var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
						}

						return default(Response);
					}
					finally
					{
						if (response_ != null)
							response_.Dispose();
					}
				}
			}
			finally
			{
				if (client_ != null)
					client_.Dispose();
			}
		}

		/// <summary>获取订单。</summary>
		/// <param name="id">要获取订单的 Id。</param>
		/// <returns>返回订单数据。</returns>
		/// <exception cref="SwaggerException">A server side error occurred.</exception>
		public System.Threading.Tasks.Task<OrderDetails> Get2Async(System.Guid id)
		{
			return Get2Async(id, System.Threading.CancellationToken.None);
		}

		/// <summary>获取订单。</summary>
		/// <param name="id">要获取订单的 Id。</param>
		/// <returns>返回订单数据。</returns>
		/// <exception cref="SwaggerException">A server side error occurred.</exception>
		/// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
		public async System.Threading.Tasks.Task<OrderDetails> Get2Async(System.Guid id, System.Threading.CancellationToken cancellationToken)
		{
			if (id == null)
				throw new System.ArgumentNullException("id");

			var urlBuilder_ = new System.Text.StringBuilder();
			urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/v1/order/{id}");
			urlBuilder_.Replace("{id}", System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));

			var client_ = new System.Net.Http.HttpClient();
			try
			{
				using (var request_ = new System.Net.Http.HttpRequestMessage())
				{
					request_.Method = new System.Net.Http.HttpMethod("GET");
					request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));

					PrepareRequest(client_, request_, urlBuilder_);
					var url_ = urlBuilder_.ToString();
					request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
					PrepareRequest(client_, request_, url_);

					var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
					try
					{
						var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
						if (response_.Content != null && response_.Content.Headers != null)
						{
							foreach (var item_ in response_.Content.Headers)
								headers_[item_.Key] = item_.Value;
						}

						ProcessResponse(client_, response_);

						var status_ = ((int)response_.StatusCode).ToString();
						if (status_ == "400")
						{
							var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							var result_ = default(System.Collections.ObjectModel.ObservableCollection<string>);
							try
							{
								result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<System.Collections.ObjectModel.ObservableCollection<string>>(responseData_, _settings.Value);
							}
							catch (System.Exception exception_)
							{
								throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
							}
							throw new SwaggerException<System.Collections.ObjectModel.ObservableCollection<string>>("\u53c2\u6570\u65e0\u6548\u3002", (int)response_.StatusCode, responseData_, headers_, result_, null);
						}
						else
						if (status_ == "404")
						{
							var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new SwaggerException("\u53c2\u6570 Id \u65e0\u6548\u3002", (int)response_.StatusCode, responseData_, headers_, null);
						}
						else
						if (status_ == "200")
						{
							var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							var result_ = default(OrderDetails);
							try
							{
								result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<OrderDetails>(responseData_, _settings.Value);
								return result_;
							}
							catch (System.Exception exception_)
							{
								throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
							}
						}
						else
						if (status_ != "200" && status_ != "204")
						{
							var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
						}

						return default(OrderDetails);
					}
					finally
					{
						if (response_ != null)
							response_.Dispose();
					}
				}
			}
			finally
			{
				if (client_ != null)
					client_.Dispose();
			}
		}

		/// <summary>编辑订单。</summary>
		/// <param name="id">要编辑订单的 Id。</param>
		/// <param name="subject">订单摘要</param>
		/// <param name="date">日期</param>
		/// <param name="hearFromId">从何处了解本站 Id</param>
		/// <param name="hearFromName">从何处了解本站名称</param>
		/// <param name="amount">数量</param>
		/// <param name="price">单价</param>
		/// <param name="total">金额</param>
		/// <returns>无返回值。</returns>
		/// <exception cref="SwaggerException">A server side error occurred.</exception>
		public System.Threading.Tasks.Task UpdateAsync(System.Guid id, string subject, System.DateTime? date, System.Guid? hearFromId, string hearFromName, int? amount, decimal? price, decimal? total)
		{
			return UpdateAsync(id, subject, date, hearFromId, hearFromName, amount, price, total, System.Threading.CancellationToken.None);
		}

		/// <summary>编辑订单。</summary>
		/// <param name="id">要编辑订单的 Id。</param>
		/// <param name="subject">订单摘要</param>
		/// <param name="date">日期</param>
		/// <param name="hearFromId">从何处了解本站 Id</param>
		/// <param name="hearFromName">从何处了解本站名称</param>
		/// <param name="amount">数量</param>
		/// <param name="price">单价</param>
		/// <param name="total">金额</param>
		/// <returns>无返回值。</returns>
		/// <exception cref="SwaggerException">A server side error occurred.</exception>
		/// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
		public async System.Threading.Tasks.Task UpdateAsync(System.Guid id, string subject, System.DateTime? date, System.Guid? hearFromId, string hearFromName, int? amount, decimal? price, decimal? total, System.Threading.CancellationToken cancellationToken)
		{
			if (id == null)
				throw new System.ArgumentNullException("id");

			var urlBuilder_ = new System.Text.StringBuilder();
			urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/v1/order/{id}?");
			urlBuilder_.Replace("{id}", System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));
			if (subject != null) urlBuilder_.Append("subject=").Append(System.Uri.EscapeDataString(ConvertToString(subject, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
			if (date != null) urlBuilder_.Append("date=").Append(System.Uri.EscapeDataString(date.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append("&");
			if (hearFromId != null) urlBuilder_.Append("hearFromId=").Append(System.Uri.EscapeDataString(ConvertToString(hearFromId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
			if (hearFromName != null) urlBuilder_.Append("hearFromName=").Append(System.Uri.EscapeDataString(ConvertToString(hearFromName, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
			if (amount != null) urlBuilder_.Append("amount=").Append(System.Uri.EscapeDataString(ConvertToString(amount, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
			if (price != null) urlBuilder_.Append("price=").Append(System.Uri.EscapeDataString(ConvertToString(price, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
			if (total != null) urlBuilder_.Append("total=").Append(System.Uri.EscapeDataString(ConvertToString(total, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
			urlBuilder_.Length--;

			var client_ = new System.Net.Http.HttpClient();
			try
			{
				using (var request_ = new System.Net.Http.HttpRequestMessage())
				{
					request_.Content = new System.Net.Http.StringContent(string.Empty, System.Text.Encoding.UTF8, "application/json");
					request_.Method = new System.Net.Http.HttpMethod("PUT");

					PrepareRequest(client_, request_, urlBuilder_);
					var url_ = urlBuilder_.ToString();
					request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
					PrepareRequest(client_, request_, url_);

					var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
					try
					{
						var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
						if (response_.Content != null && response_.Content.Headers != null)
						{
							foreach (var item_ in response_.Content.Headers)
								headers_[item_.Key] = item_.Value;
						}

						ProcessResponse(client_, response_);

						var status_ = ((int)response_.StatusCode).ToString();
						if (status_ == "400")
						{
							var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							var result_ = default(System.Collections.ObjectModel.ObservableCollection<string>);
							try
							{
								result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<System.Collections.ObjectModel.ObservableCollection<string>>(responseData_, _settings.Value);
							}
							catch (System.Exception exception_)
							{
								throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
							}
							throw new SwaggerException<System.Collections.ObjectModel.ObservableCollection<string>>("\u53c2\u6570\u65e0\u6548\u3002", (int)response_.StatusCode, responseData_, headers_, result_, null);
						}
						else
						if (status_ == "204")
						{
							return;
						}
						else
						if (status_ != "200" && status_ != "204")
						{
							var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
						}
					}
					finally
					{
						if (response_ != null)
							response_.Dispose();
					}
				}
			}
			finally
			{
				if (client_ != null)
					client_.Dispose();
			}
		}

		/// <summary>删除订单。</summary>
		/// <param name="id">要删除订单的 ID。</param>
		/// <returns>无返回值。</returns>
		/// <exception cref="SwaggerException">A server side error occurred.</exception>
		public System.Threading.Tasks.Task DeleteAsync(System.Guid id)
		{
			return DeleteAsync(id, System.Threading.CancellationToken.None);
		}

		/// <summary>删除订单。</summary>
		/// <param name="id">要删除订单的 ID。</param>
		/// <returns>无返回值。</returns>
		/// <exception cref="SwaggerException">A server side error occurred.</exception>
		/// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
		public async System.Threading.Tasks.Task DeleteAsync(System.Guid id, System.Threading.CancellationToken cancellationToken)
		{
			if (id == null)
				throw new System.ArgumentNullException("id");

			var urlBuilder_ = new System.Text.StringBuilder();
			urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/v1/order/{id}");
			urlBuilder_.Replace("{id}", System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));

			var client_ = new System.Net.Http.HttpClient();
			try
			{
				using (var request_ = new System.Net.Http.HttpRequestMessage())
				{
					request_.Method = new System.Net.Http.HttpMethod("DELETE");

					PrepareRequest(client_, request_, urlBuilder_);
					var url_ = urlBuilder_.ToString();
					request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
					PrepareRequest(client_, request_, url_);

					var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
					try
					{
						var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
						if (response_.Content != null && response_.Content.Headers != null)
						{
							foreach (var item_ in response_.Content.Headers)
								headers_[item_.Key] = item_.Value;
						}

						ProcessResponse(client_, response_);

						var status_ = ((int)response_.StatusCode).ToString();
						if (status_ == "400")
						{
							var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							var result_ = default(System.Collections.ObjectModel.ObservableCollection<string>);
							try
							{
								result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<System.Collections.ObjectModel.ObservableCollection<string>>(responseData_, _settings.Value);
							}
							catch (System.Exception exception_)
							{
								throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
							}
							throw new SwaggerException<System.Collections.ObjectModel.ObservableCollection<string>>("\u53c2\u6570\u65e0\u6548\u3002", (int)response_.StatusCode, responseData_, headers_, result_, null);
						}
						else
						if (status_ == "204")
						{
							return;
						}
						else
						if (status_ != "200" && status_ != "204")
						{
							var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
						}
					}
					finally
					{
						if (response_ != null)
							response_.Dispose();
					}
				}
			}
			finally
			{
				if (client_ != null)
					client_.Dispose();
			}
		}

		/// <summary>创建订单。</summary>
		/// <returns>返回订单数据，并返回详细数据地址（URL）。</returns>
		/// <exception cref="SwaggerException">A server side error occurred.</exception>
		public System.Threading.Tasks.Task<OrderDetails> PostAsync(Command command)
		{
			return PostAsync(command, System.Threading.CancellationToken.None);
		}

		/// <summary>创建订单。</summary>
		/// <returns>返回订单数据，并返回详细数据地址（URL）。</returns>
		/// <exception cref="SwaggerException">A server side error occurred.</exception>
		/// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
		public async System.Threading.Tasks.Task<OrderDetails> PostAsync(Command command, System.Threading.CancellationToken cancellationToken)
		{
			var urlBuilder_ = new System.Text.StringBuilder();
			urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/v1/order");

			var client_ = new System.Net.Http.HttpClient();
			try
			{
				using (var request_ = new System.Net.Http.HttpRequestMessage())
				{
					var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(command, _settings.Value));
					content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
					request_.Content = content_;
					request_.Method = new System.Net.Http.HttpMethod("POST");
					request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));

					PrepareRequest(client_, request_, urlBuilder_);
					var url_ = urlBuilder_.ToString();
					request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
					PrepareRequest(client_, request_, url_);

					var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
					try
					{
						var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
						if (response_.Content != null && response_.Content.Headers != null)
						{
							foreach (var item_ in response_.Content.Headers)
								headers_[item_.Key] = item_.Value;
						}

						ProcessResponse(client_, response_);

						var status_ = ((int)response_.StatusCode).ToString();
						if (status_ == "400")
						{
							var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							var result_ = default(System.Collections.ObjectModel.ObservableCollection<string>);
							try
							{
								result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<System.Collections.ObjectModel.ObservableCollection<string>>(responseData_, _settings.Value);
							}
							catch (System.Exception exception_)
							{
								throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
							}
							throw new SwaggerException<System.Collections.ObjectModel.ObservableCollection<string>>("\u53c2\u6570\u65e0\u6548\u3002", (int)response_.StatusCode, responseData_, headers_, result_, null);
						}
						else
						if (status_ == "201")
						{
							var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							var result_ = default(OrderDetails);
							try
							{
								result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<OrderDetails>(responseData_, _settings.Value);
								return result_;
							}
							catch (System.Exception exception_)
							{
								throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
							}
						}
						else
						if (status_ != "200" && status_ != "204")
						{
							var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
						}

						return default(OrderDetails);
					}
					finally
					{
						if (response_ != null)
							response_.Dispose();
					}
				}
			}
			finally
			{
				if (client_ != null)
					client_.Dispose();
			}
		}

		/// <summary>支付订单。</summary>
		/// <param name="id">要付款订单的 Id。</param>
		/// <param name="payment">付款金额</param>
		/// <returns>无返回值。</returns>
		/// <exception cref="SwaggerException">A server side error occurred.</exception>
		public System.Threading.Tasks.Task PayAsync(System.Guid id, decimal? payment)
		{
			return PayAsync(id, payment, System.Threading.CancellationToken.None);
		}

		/// <summary>支付订单。</summary>
		/// <param name="id">要付款订单的 Id。</param>
		/// <param name="payment">付款金额</param>
		/// <returns>无返回值。</returns>
		/// <exception cref="SwaggerException">A server side error occurred.</exception>
		/// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
		public async System.Threading.Tasks.Task PayAsync(System.Guid id, decimal? payment, System.Threading.CancellationToken cancellationToken)
		{
			if (id == null)
				throw new System.ArgumentNullException("id");

			var urlBuilder_ = new System.Text.StringBuilder();
			urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/v1/order/{id}/pay?");
			urlBuilder_.Replace("{id}", System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));
			if (payment != null) urlBuilder_.Append("payment=").Append(System.Uri.EscapeDataString(ConvertToString(payment, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
			urlBuilder_.Length--;

			var client_ = new System.Net.Http.HttpClient();
			try
			{
				using (var request_ = new System.Net.Http.HttpRequestMessage())
				{
					request_.Content = new System.Net.Http.StringContent(string.Empty, System.Text.Encoding.UTF8, "application/json");
					request_.Method = new System.Net.Http.HttpMethod("POST");

					PrepareRequest(client_, request_, urlBuilder_);
					var url_ = urlBuilder_.ToString();
					request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
					PrepareRequest(client_, request_, url_);

					var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
					try
					{
						var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
						if (response_.Content != null && response_.Content.Headers != null)
						{
							foreach (var item_ in response_.Content.Headers)
								headers_[item_.Key] = item_.Value;
						}

						ProcessResponse(client_, response_);

						var status_ = ((int)response_.StatusCode).ToString();
						if (status_ == "400")
						{
							var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							var result_ = default(System.Collections.ObjectModel.ObservableCollection<string>);
							try
							{
								result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<System.Collections.ObjectModel.ObservableCollection<string>>(responseData_, _settings.Value);
							}
							catch (System.Exception exception_)
							{
								throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
							}
							throw new SwaggerException<System.Collections.ObjectModel.ObservableCollection<string>>("\u53c2\u6570\u65e0\u6548\u3002", (int)response_.StatusCode, responseData_, headers_, result_, null);
						}
						else
						if (status_ == "200")
						{
							return;
						}
						else
						if (status_ != "200" && status_ != "204")
						{
							var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
						}
					}
					finally
					{
						if (response_ != null)
							response_.Dispose();
					}
				}
			}
			finally
			{
				if (client_ != null)
					client_.Dispose();
			}
		}

		private string ConvertToString(object value, System.Globalization.CultureInfo cultureInfo)
		{
			if (value is System.Enum)
			{
				string name = System.Enum.GetName(value.GetType(), value);
				if (name != null)
				{
					var field = System.Reflection.IntrospectionExtensions.GetTypeInfo(value.GetType()).GetDeclaredField(name);
					if (field != null)
					{
						var attribute = System.Reflection.CustomAttributeExtensions.GetCustomAttribute(field, typeof(System.Runtime.Serialization.EnumMemberAttribute))
							as System.Runtime.Serialization.EnumMemberAttribute;
						if (attribute != null)
						{
							return attribute.Value;
						}
					}
				}
			}
			else if (value is byte[])
			{
				return System.Convert.ToBase64String((byte[])value);
			}
			else if (value.GetType().IsArray)
			{
				var array = System.Linq.Enumerable.OfType<object>((System.Array)value);
				return string.Join(",", System.Linq.Enumerable.Select(array, o => ConvertToString(o, cultureInfo)));
			}

			return System.Convert.ToString(value, cultureInfo);
		}
	}

	[System.CodeDom.Compiler.GeneratedCode("NSwag", "11.17.3.0 (NJsonSchema v9.10.46.0 (Newtonsoft.Json v9.0.0.0))")]
	public partial class HearFromsClient
	{
		private string _baseUrl = "http://microsertemplate.m.lunztech.cn";
		private System.Lazy<Newtonsoft.Json.JsonSerializerSettings> _settings;

		public HearFromsClient()
		{
			_settings = new System.Lazy<Newtonsoft.Json.JsonSerializerSettings>(() =>
			{
				var settings = new Newtonsoft.Json.JsonSerializerSettings { PreserveReferencesHandling = Newtonsoft.Json.PreserveReferencesHandling.All };
				UpdateJsonSerializerSettings(settings);
				return settings;
			});
		}

		public string BaseUrl
		{
			get { return _baseUrl; }
			set { _baseUrl = value; }
		}

		protected Newtonsoft.Json.JsonSerializerSettings JsonSerializerSettings { get { return _settings.Value; } }

		partial void UpdateJsonSerializerSettings(Newtonsoft.Json.JsonSerializerSettings settings);
		partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, string url);
		partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, System.Text.StringBuilder urlBuilder);
		partial void ProcessResponse(System.Net.Http.HttpClient client, System.Net.Http.HttpResponseMessage response);

		/// <summary>获取从哪里听说列表。</summary>
		/// <param name="filter">过滤条件</param>
		/// <param name="pageIndex">页号，如 1</param>
		/// <param name="pageSize">每页行数，如 10</param>
		/// <param name="sort">排序规则</param>
		/// <returns>返回从哪里听说数据列表。</returns>
		/// <exception cref="SwaggerException">A server side error occurred.</exception>
		public System.Threading.Tasks.Task<Response2> GetAsync(QueryGroup filter, int? pageIndex, int? pageSize, System.Collections.Generic.IEnumerable<PagingSort> sort)
		{
			return GetAsync(filter, pageIndex, pageSize, sort, System.Threading.CancellationToken.None);
		}

		/// <summary>获取从哪里听说列表。</summary>
		/// <param name="filter">过滤条件</param>
		/// <param name="pageIndex">页号，如 1</param>
		/// <param name="pageSize">每页行数，如 10</param>
		/// <param name="sort">排序规则</param>
		/// <returns>返回从哪里听说数据列表。</returns>
		/// <exception cref="SwaggerException">A server side error occurred.</exception>
		/// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
		public async System.Threading.Tasks.Task<Response2> GetAsync(QueryGroup filter, int? pageIndex, int? pageSize, System.Collections.Generic.IEnumerable<PagingSort> sort, System.Threading.CancellationToken cancellationToken)
		{
			var urlBuilder_ = new System.Text.StringBuilder();
			urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/v1/hear-froms?");
			if (filter != null) urlBuilder_.Append("filter=").Append(System.Uri.EscapeDataString(ConvertToString(filter, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
			if (pageIndex != null) urlBuilder_.Append("pageIndex=").Append(System.Uri.EscapeDataString(ConvertToString(pageIndex, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
			if (pageSize != null) urlBuilder_.Append("pageSize=").Append(System.Uri.EscapeDataString(ConvertToString(pageSize, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
			if (sort != null) foreach (var item_ in sort) { urlBuilder_.Append("sort=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
			urlBuilder_.Length--;

			var client_ = new System.Net.Http.HttpClient();
			try
			{
				using (var request_ = new System.Net.Http.HttpRequestMessage())
				{
					request_.Method = new System.Net.Http.HttpMethod("GET");
					request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));

					PrepareRequest(client_, request_, urlBuilder_);
					var url_ = urlBuilder_.ToString();
					request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
					PrepareRequest(client_, request_, url_);

					var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
					try
					{
						var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
						if (response_.Content != null && response_.Content.Headers != null)
						{
							foreach (var item_ in response_.Content.Headers)
								headers_[item_.Key] = item_.Value;
						}

						ProcessResponse(client_, response_);

						var status_ = ((int)response_.StatusCode).ToString();
						if (status_ == "400")
						{
							var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							var result_ = default(System.Collections.ObjectModel.ObservableCollection<string>);
							try
							{
								result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<System.Collections.ObjectModel.ObservableCollection<string>>(responseData_, _settings.Value);
							}
							catch (System.Exception exception_)
							{
								throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
							}
							throw new SwaggerException<System.Collections.ObjectModel.ObservableCollection<string>>("\u53c2\u6570\u65e0\u6548\u3002", (int)response_.StatusCode, responseData_, headers_, result_, null);
						}
						else
						if (status_ == "200")
						{
							var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							var result_ = default(Response2);
							try
							{
								result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Response2>(responseData_, _settings.Value);
								return result_;
							}
							catch (System.Exception exception_)
							{
								throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
							}
						}
						else
						if (status_ != "200" && status_ != "204")
						{
							var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
						}

						return default(Response2);
					}
					finally
					{
						if (response_ != null)
							response_.Dispose();
					}
				}
			}
			finally
			{
				if (client_ != null)
					client_.Dispose();
			}
		}

		/// <summary>获取从哪里听说数据。</summary>
		/// <param name="id">要获取从哪里听说数据的 Id。</param>
		/// <returns>返回从哪里听说数据。</returns>
		/// <exception cref="SwaggerException">A server side error occurred.</exception>
		public System.Threading.Tasks.Task<HearFromDetails> Get2Async(System.Guid id)
		{
			return Get2Async(id, System.Threading.CancellationToken.None);
		}

		/// <summary>获取从哪里听说数据。</summary>
		/// <param name="id">要获取从哪里听说数据的 Id。</param>
		/// <returns>返回从哪里听说数据。</returns>
		/// <exception cref="SwaggerException">A server side error occurred.</exception>
		/// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
		public async System.Threading.Tasks.Task<HearFromDetails> Get2Async(System.Guid id, System.Threading.CancellationToken cancellationToken)
		{
			if (id == null)
				throw new System.ArgumentNullException("id");

			var urlBuilder_ = new System.Text.StringBuilder();
			urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/v1/hear-from/{id}");
			urlBuilder_.Replace("{id}", System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));

			var client_ = new System.Net.Http.HttpClient();
			try
			{
				using (var request_ = new System.Net.Http.HttpRequestMessage())
				{
					request_.Method = new System.Net.Http.HttpMethod("GET");
					request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));

					PrepareRequest(client_, request_, urlBuilder_);
					var url_ = urlBuilder_.ToString();
					request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
					PrepareRequest(client_, request_, url_);

					var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
					try
					{
						var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
						if (response_.Content != null && response_.Content.Headers != null)
						{
							foreach (var item_ in response_.Content.Headers)
								headers_[item_.Key] = item_.Value;
						}

						ProcessResponse(client_, response_);

						var status_ = ((int)response_.StatusCode).ToString();
						if (status_ == "400")
						{
							var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							var result_ = default(System.Collections.ObjectModel.ObservableCollection<string>);
							try
							{
								result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<System.Collections.ObjectModel.ObservableCollection<string>>(responseData_, _settings.Value);
							}
							catch (System.Exception exception_)
							{
								throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
							}
							throw new SwaggerException<System.Collections.ObjectModel.ObservableCollection<string>>("\u53c2\u6570\u65e0\u6548\u3002", (int)response_.StatusCode, responseData_, headers_, result_, null);
						}
						else
						if (status_ == "404")
						{
							var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new SwaggerException("\u53c2\u6570 Id \u65e0\u6548\u3002", (int)response_.StatusCode, responseData_, headers_, null);
						}
						else
						if (status_ == "200")
						{
							var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							var result_ = default(HearFromDetails);
							try
							{
								result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<HearFromDetails>(responseData_, _settings.Value);
								return result_;
							}
							catch (System.Exception exception_)
							{
								throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
							}
						}
						else
						if (status_ != "200" && status_ != "204")
						{
							var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
						}

						return default(HearFromDetails);
					}
					finally
					{
						if (response_ != null)
							response_.Dispose();
					}
				}
			}
			finally
			{
				if (client_ != null)
					client_.Dispose();
			}
		}

		/// <summary>删除从哪里听说数据。</summary>
		/// <param name="id">要删除从哪里听说数据的 Id。</param>
		/// <returns>无返回值。</returns>
		/// <exception cref="SwaggerException">A server side error occurred.</exception>
		public System.Threading.Tasks.Task DeleteAsync(System.Guid id)
		{
			return DeleteAsync(id, System.Threading.CancellationToken.None);
		}

		/// <summary>删除从哪里听说数据。</summary>
		/// <param name="id">要删除从哪里听说数据的 Id。</param>
		/// <returns>无返回值。</returns>
		/// <exception cref="SwaggerException">A server side error occurred.</exception>
		/// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
		public async System.Threading.Tasks.Task DeleteAsync(System.Guid id, System.Threading.CancellationToken cancellationToken)
		{
			if (id == null)
				throw new System.ArgumentNullException("id");

			var urlBuilder_ = new System.Text.StringBuilder();
			urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/v1/hear-from/{id}");
			urlBuilder_.Replace("{id}", System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));

			var client_ = new System.Net.Http.HttpClient();
			try
			{
				using (var request_ = new System.Net.Http.HttpRequestMessage())
				{
					request_.Method = new System.Net.Http.HttpMethod("DELETE");

					PrepareRequest(client_, request_, urlBuilder_);
					var url_ = urlBuilder_.ToString();
					request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
					PrepareRequest(client_, request_, url_);

					var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
					try
					{
						var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
						if (response_.Content != null && response_.Content.Headers != null)
						{
							foreach (var item_ in response_.Content.Headers)
								headers_[item_.Key] = item_.Value;
						}

						ProcessResponse(client_, response_);

						var status_ = ((int)response_.StatusCode).ToString();
						if (status_ == "400")
						{
							var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							var result_ = default(System.Collections.ObjectModel.ObservableCollection<string>);
							try
							{
								result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<System.Collections.ObjectModel.ObservableCollection<string>>(responseData_, _settings.Value);
							}
							catch (System.Exception exception_)
							{
								throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
							}
							throw new SwaggerException<System.Collections.ObjectModel.ObservableCollection<string>>("\u53c2\u6570\u65e0\u6548\u3002", (int)response_.StatusCode, responseData_, headers_, result_, null);
						}
						else
						if (status_ == "204")
						{
							return;
						}
						else
						if (status_ != "200" && status_ != "204")
						{
							var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
						}
					}
					finally
					{
						if (response_ != null)
							response_.Dispose();
					}
				}
			}
			finally
			{
				if (client_ != null)
					client_.Dispose();
			}
		}

		/// <summary>创建从哪里听说数据。</summary>
		/// <param name="name">要创建从哪里听说数据的名称 Name</param>
		/// <returns>返回从哪里听说数据，并返回详细数据地址（URL）。</returns>
		/// <exception cref="SwaggerException">A server side error occurred.</exception>
		public System.Threading.Tasks.Task<HearFromDetails> PostAsync(string name)
		{
			return PostAsync(name, System.Threading.CancellationToken.None);
		}

		/// <summary>创建从哪里听说数据。</summary>
		/// <param name="name">要创建从哪里听说数据的名称 Name</param>
		/// <returns>返回从哪里听说数据，并返回详细数据地址（URL）。</returns>
		/// <exception cref="SwaggerException">A server side error occurred.</exception>
		/// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
		public async System.Threading.Tasks.Task<HearFromDetails> PostAsync(string name, System.Threading.CancellationToken cancellationToken)
		{
			var urlBuilder_ = new System.Text.StringBuilder();
			urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/v1/hear-from?");
			if (name != null) urlBuilder_.Append("name=").Append(System.Uri.EscapeDataString(ConvertToString(name, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
			urlBuilder_.Length--;

			var client_ = new System.Net.Http.HttpClient();
			try
			{
				using (var request_ = new System.Net.Http.HttpRequestMessage())
				{
					request_.Content = new System.Net.Http.StringContent(string.Empty, System.Text.Encoding.UTF8, "application/json");
					request_.Method = new System.Net.Http.HttpMethod("POST");
					request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));

					PrepareRequest(client_, request_, urlBuilder_);
					var url_ = urlBuilder_.ToString();
					request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
					PrepareRequest(client_, request_, url_);

					var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
					try
					{
						var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
						if (response_.Content != null && response_.Content.Headers != null)
						{
							foreach (var item_ in response_.Content.Headers)
								headers_[item_.Key] = item_.Value;
						}

						ProcessResponse(client_, response_);

						var status_ = ((int)response_.StatusCode).ToString();
						if (status_ == "400")
						{
							var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							var result_ = default(System.Collections.ObjectModel.ObservableCollection<string>);
							try
							{
								result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<System.Collections.ObjectModel.ObservableCollection<string>>(responseData_, _settings.Value);
							}
							catch (System.Exception exception_)
							{
								throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
							}
							throw new SwaggerException<System.Collections.ObjectModel.ObservableCollection<string>>("\u53c2\u6570\u65e0\u6548\u3002", (int)response_.StatusCode, responseData_, headers_, result_, null);
						}
						else
						if (status_ == "201")
						{
							var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							var result_ = default(HearFromDetails);
							try
							{
								result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<HearFromDetails>(responseData_, _settings.Value);
								return result_;
							}
							catch (System.Exception exception_)
							{
								throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
							}
						}
						else
						if (status_ != "200" && status_ != "204")
						{
							var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
						}

						return default(HearFromDetails);
					}
					finally
					{
						if (response_ != null)
							response_.Dispose();
					}
				}
			}
			finally
			{
				if (client_ != null)
					client_.Dispose();
			}
		}

		/// <summary>编辑从哪里听说数据。</summary>
		/// <returns>无返回值。</returns>
		/// <exception cref="SwaggerException">A server side error occurred.</exception>
		public System.Threading.Tasks.Task UpdateAsync(Command2 command)
		{
			return UpdateAsync(command, System.Threading.CancellationToken.None);
		}

		/// <summary>编辑从哪里听说数据。</summary>
		/// <returns>无返回值。</returns>
		/// <exception cref="SwaggerException">A server side error occurred.</exception>
		/// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
		public async System.Threading.Tasks.Task UpdateAsync(Command2 command, System.Threading.CancellationToken cancellationToken)
		{
			var urlBuilder_ = new System.Text.StringBuilder();
			urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/v1/hear-from");

			var client_ = new System.Net.Http.HttpClient();
			try
			{
				using (var request_ = new System.Net.Http.HttpRequestMessage())
				{
					var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(command, _settings.Value));
					content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
					request_.Content = content_;
					request_.Method = new System.Net.Http.HttpMethod("PUT");

					PrepareRequest(client_, request_, urlBuilder_);
					var url_ = urlBuilder_.ToString();
					request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
					PrepareRequest(client_, request_, url_);

					var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
					try
					{
						var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
						if (response_.Content != null && response_.Content.Headers != null)
						{
							foreach (var item_ in response_.Content.Headers)
								headers_[item_.Key] = item_.Value;
						}

						ProcessResponse(client_, response_);

						var status_ = ((int)response_.StatusCode).ToString();
						if (status_ == "400")
						{
							var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							var result_ = default(System.Collections.ObjectModel.ObservableCollection<string>);
							try
							{
								result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<System.Collections.ObjectModel.ObservableCollection<string>>(responseData_, _settings.Value);
							}
							catch (System.Exception exception_)
							{
								throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
							}
							throw new SwaggerException<System.Collections.ObjectModel.ObservableCollection<string>>("\u53c2\u6570\u65e0\u6548\u3002", (int)response_.StatusCode, responseData_, headers_, result_, null);
						}
						else
						if (status_ == "204")
						{
							return;
						}
						else
						if (status_ != "200" && status_ != "204")
						{
							var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
						}
					}
					finally
					{
						if (response_ != null)
							response_.Dispose();
					}
				}
			}
			finally
			{
				if (client_ != null)
					client_.Dispose();
			}
		}

		private string ConvertToString(object value, System.Globalization.CultureInfo cultureInfo)
		{
			if (value is System.Enum)
			{
				string name = System.Enum.GetName(value.GetType(), value);
				if (name != null)
				{
					var field = System.Reflection.IntrospectionExtensions.GetTypeInfo(value.GetType()).GetDeclaredField(name);
					if (field != null)
					{
						var attribute = System.Reflection.CustomAttributeExtensions.GetCustomAttribute(field, typeof(System.Runtime.Serialization.EnumMemberAttribute))
							as System.Runtime.Serialization.EnumMemberAttribute;
						if (attribute != null)
						{
							return attribute.Value;
						}
					}
				}
			}
			else if (value is byte[])
			{
				return System.Convert.ToBase64String((byte[])value);
			}
			else if (value.GetType().IsArray)
			{
				var array = System.Linq.Enumerable.OfType<object>((System.Array)value);
				return string.Join(",", System.Linq.Enumerable.Select(array, o => ConvertToString(o, cultureInfo)));
			}

			return System.Convert.ToString(value, cultureInfo);
		}
	}



	[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.46.0 (Newtonsoft.Json v9.0.0.0)")]
	public partial class QueryGroup : System.ComponentModel.INotifyPropertyChanged
	{
		private string _op;
		private System.Collections.ObjectModel.ObservableCollection<QueryGroup> _groups;
		private System.Collections.ObjectModel.ObservableCollection<Rule> _rules;

		[Newtonsoft.Json.JsonProperty("op", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public string Op
		{
			get { return _op; }
			set
			{
				if (_op != value)
				{
					_op = value;
					RaisePropertyChanged();
				}
			}
		}

		[Newtonsoft.Json.JsonProperty("groups", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public System.Collections.ObjectModel.ObservableCollection<QueryGroup> Groups
		{
			get { return _groups; }
			set
			{
				if (_groups != value)
				{
					_groups = value;
					RaisePropertyChanged();
				}
			}
		}

		[Newtonsoft.Json.JsonProperty("rules", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public System.Collections.ObjectModel.ObservableCollection<Rule> Rules
		{
			get { return _rules; }
			set
			{
				if (_rules != value)
				{
					_rules = value;
					RaisePropertyChanged();
				}
			}
		}

		public string ToJson()
		{
			return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings { PreserveReferencesHandling = Newtonsoft.Json.PreserveReferencesHandling.All });
		}

		public static QueryGroup FromJson(string data)
		{
			return Newtonsoft.Json.JsonConvert.DeserializeObject<QueryGroup>(data, new Newtonsoft.Json.JsonSerializerSettings { PreserveReferencesHandling = Newtonsoft.Json.PreserveReferencesHandling.All });
		}

		public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;

		protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
		{
			var handler = PropertyChanged;
			if (handler != null)
				handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
		}

	}

	[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.46.0 (Newtonsoft.Json v9.0.0.0)")]
	public partial class Rule : System.ComponentModel.INotifyPropertyChanged
	{
		private string _field;
		private string _op;
		private string _data;
		private System.Collections.ObjectModel.ObservableCollection<string> _datas;

		[Newtonsoft.Json.JsonProperty("field", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public string Field
		{
			get { return _field; }
			set
			{
				if (_field != value)
				{
					_field = value;
					RaisePropertyChanged();
				}
			}
		}

		[Newtonsoft.Json.JsonProperty("op", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public string Op
		{
			get { return _op; }
			set
			{
				if (_op != value)
				{
					_op = value;
					RaisePropertyChanged();
				}
			}
		}

		[Newtonsoft.Json.JsonProperty("data", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public string Data
		{
			get { return _data; }
			set
			{
				if (_data != value)
				{
					_data = value;
					RaisePropertyChanged();
				}
			}
		}

		[Newtonsoft.Json.JsonProperty("datas", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public System.Collections.ObjectModel.ObservableCollection<string> Datas
		{
			get { return _datas; }
			set
			{
				if (_datas != value)
				{
					_datas = value;
					RaisePropertyChanged();
				}
			}
		}

		public string ToJson()
		{
			return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings { PreserveReferencesHandling = Newtonsoft.Json.PreserveReferencesHandling.All });
		}

		public static Rule FromJson(string data)
		{
			return Newtonsoft.Json.JsonConvert.DeserializeObject<Rule>(data, new Newtonsoft.Json.JsonSerializerSettings { PreserveReferencesHandling = Newtonsoft.Json.PreserveReferencesHandling.All });
		}

		public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;

		protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
		{
			var handler = PropertyChanged;
			if (handler != null)
				handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
		}

	}

	[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.46.0 (Newtonsoft.Json v9.0.0.0)")]
	public partial class PagingSort : System.ComponentModel.INotifyPropertyChanged
	{
		private string _field;
		private string _sort;
		private string _sortOrder;

		[Newtonsoft.Json.JsonProperty("field", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public string Field
		{
			get { return _field; }
			set
			{
				if (_field != value)
				{
					_field = value;
					RaisePropertyChanged();
				}
			}
		}

		[Newtonsoft.Json.JsonProperty("sort", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public string Sort
		{
			get { return _sort; }
			set
			{
				if (_sort != value)
				{
					_sort = value;
					RaisePropertyChanged();
				}
			}
		}

		[Newtonsoft.Json.JsonProperty("sortOrder", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public string SortOrder
		{
			get { return _sortOrder; }
			set
			{
				if (_sortOrder != value)
				{
					_sortOrder = value;
					RaisePropertyChanged();
				}
			}
		}

		public string ToJson()
		{
			return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings { PreserveReferencesHandling = Newtonsoft.Json.PreserveReferencesHandling.All });
		}

		public static PagingSort FromJson(string data)
		{
			return Newtonsoft.Json.JsonConvert.DeserializeObject<PagingSort>(data, new Newtonsoft.Json.JsonSerializerSettings { PreserveReferencesHandling = Newtonsoft.Json.PreserveReferencesHandling.All });
		}

		public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;

		protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
		{
			var handler = PropertyChanged;
			if (handler != null)
				handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
		}

	}

	/// <summary>订单数据列表</summary>
	[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.46.0 (Newtonsoft.Json v9.0.0.0)")]
	public partial class Response : System.ComponentModel.INotifyPropertyChanged
	{
		private long _count;
		private int? _pageIndex;
		private int? _pageSize;
		private System.Collections.ObjectModel.ObservableCollection<OrderDetails> _data;

		/// <summary>总行数</summary>
		[Newtonsoft.Json.JsonProperty("count", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public long Count
		{
			get { return _count; }
			set
			{
				if (_count != value)
				{
					_count = value;
					RaisePropertyChanged();
				}
			}
		}

		/// <summary>当前页号</summary>
		[Newtonsoft.Json.JsonProperty("pageIndex", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public int? PageIndex
		{
			get { return _pageIndex; }
			set
			{
				if (_pageIndex != value)
				{
					_pageIndex = value;
					RaisePropertyChanged();
				}
			}
		}

		/// <summary>每页行数</summary>
		[Newtonsoft.Json.JsonProperty("pageSize", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public int? PageSize
		{
			get { return _pageSize; }
			set
			{
				if (_pageSize != value)
				{
					_pageSize = value;
					RaisePropertyChanged();
				}
			}
		}

		/// <summary>订单列表</summary>
		[Newtonsoft.Json.JsonProperty("data", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public System.Collections.ObjectModel.ObservableCollection<OrderDetails> Data
		{
			get { return _data; }
			set
			{
				if (_data != value)
				{
					_data = value;
					RaisePropertyChanged();
				}
			}
		}

		public string ToJson()
		{
			return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings { PreserveReferencesHandling = Newtonsoft.Json.PreserveReferencesHandling.All });
		}

		public static Response FromJson(string data)
		{
			return Newtonsoft.Json.JsonConvert.DeserializeObject<Response>(data, new Newtonsoft.Json.JsonSerializerSettings { PreserveReferencesHandling = Newtonsoft.Json.PreserveReferencesHandling.All });
		}

		public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;

		protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
		{
			var handler = PropertyChanged;
			if (handler != null)
				handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
		}

	}

	/// <summary>订单</summary>
	[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.46.0 (Newtonsoft.Json v9.0.0.0)")]
	public partial class OrderDetails2 : System.ComponentModel.INotifyPropertyChanged
	{
		private string _subject;
		private System.DateTime _date;
		private System.Guid? _hearFromId;
		private string _hearFromName;
		private int _amount;
		private decimal _price;
		private decimal _total;

		/// <summary>订单摘要</summary>
		[Newtonsoft.Json.JsonProperty("subject", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public string Subject
		{
			get { return _subject; }
			set
			{
				if (_subject != value)
				{
					_subject = value;
					RaisePropertyChanged();
				}
			}
		}

		/// <summary>日期</summary>
		[Newtonsoft.Json.JsonProperty("date", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public System.DateTime Date
		{
			get { return _date; }
			set
			{
				if (_date != value)
				{
					_date = value;
					RaisePropertyChanged();
				}
			}
		}

		/// <summary>从何处了解本站 Id</summary>
		[Newtonsoft.Json.JsonProperty("hearFromId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public System.Guid? HearFromId
		{
			get { return _hearFromId; }
			set
			{
				if (_hearFromId != value)
				{
					_hearFromId = value;
					RaisePropertyChanged();
				}
			}
		}

		/// <summary>从何处了解本站名称</summary>
		[Newtonsoft.Json.JsonProperty("hearFromName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public string HearFromName
		{
			get { return _hearFromName; }
			set
			{
				if (_hearFromName != value)
				{
					_hearFromName = value;
					RaisePropertyChanged();
				}
			}
		}

		/// <summary>数量</summary>
		[Newtonsoft.Json.JsonProperty("amount", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public int Amount
		{
			get { return _amount; }
			set
			{
				if (_amount != value)
				{
					_amount = value;
					RaisePropertyChanged();
				}
			}
		}

		/// <summary>单价</summary>
		[Newtonsoft.Json.JsonProperty("price", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public decimal Price
		{
			get { return _price; }
			set
			{
				if (_price != value)
				{
					_price = value;
					RaisePropertyChanged();
				}
			}
		}

		/// <summary>金额</summary>
		[Newtonsoft.Json.JsonProperty("total", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public decimal Total
		{
			get { return _total; }
			set
			{
				if (_total != value)
				{
					_total = value;
					RaisePropertyChanged();
				}
			}
		}

		public string ToJson()
		{
			return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings { PreserveReferencesHandling = Newtonsoft.Json.PreserveReferencesHandling.All });
		}

		public static OrderDetails2 FromJson(string data)
		{
			return Newtonsoft.Json.JsonConvert.DeserializeObject<OrderDetails2>(data, new Newtonsoft.Json.JsonSerializerSettings { PreserveReferencesHandling = Newtonsoft.Json.PreserveReferencesHandling.All });
		}

		public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;

		protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
		{
			var handler = PropertyChanged;
			if (handler != null)
				handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
		}

	}

	[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.46.0 (Newtonsoft.Json v9.0.0.0)")]
	public partial class OrderDetails : OrderDetails2, System.ComponentModel.INotifyPropertyChanged
	{
		private System.Guid _id;
		private System.Collections.ObjectModel.ObservableCollection<OrderItem> _items;

		[Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public System.Guid Id
		{
			get { return _id; }
			set
			{
				if (_id != value)
				{
					_id = value;
					RaisePropertyChanged();
				}
			}
		}

		[Newtonsoft.Json.JsonProperty("items", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public System.Collections.ObjectModel.ObservableCollection<OrderItem> Items
		{
			get { return _items; }
			set
			{
				if (_items != value)
				{
					_items = value;
					RaisePropertyChanged();
				}
			}
		}

		public string ToJson()
		{
			return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings { PreserveReferencesHandling = Newtonsoft.Json.PreserveReferencesHandling.All });
		}

		public static OrderDetails FromJson(string data)
		{
			return Newtonsoft.Json.JsonConvert.DeserializeObject<OrderDetails>(data, new Newtonsoft.Json.JsonSerializerSettings { PreserveReferencesHandling = Newtonsoft.Json.PreserveReferencesHandling.All });
		}

		public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;

		protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
		{
			var handler = PropertyChanged;
			if (handler != null)
				handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
		}

	}

	/// <summary>订单项目</summary>
	[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.46.0 (Newtonsoft.Json v9.0.0.0)")]
	public partial class OrderItem2 : System.ComponentModel.INotifyPropertyChanged
	{
		private string _productName;
		private int _amount;
		private decimal _price;
		private decimal _total;

		/// <summary>产品名称</summary>
		[Newtonsoft.Json.JsonProperty("productName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public string ProductName
		{
			get { return _productName; }
			set
			{
				if (_productName != value)
				{
					_productName = value;
					RaisePropertyChanged();
				}
			}
		}

		/// <summary>数量</summary>
		[Newtonsoft.Json.JsonProperty("amount", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public int Amount
		{
			get { return _amount; }
			set
			{
				if (_amount != value)
				{
					_amount = value;
					RaisePropertyChanged();
				}
			}
		}

		/// <summary>单价</summary>
		[Newtonsoft.Json.JsonProperty("price", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public decimal Price
		{
			get { return _price; }
			set
			{
				if (_price != value)
				{
					_price = value;
					RaisePropertyChanged();
				}
			}
		}

		/// <summary>金额</summary>
		[Newtonsoft.Json.JsonProperty("total", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public decimal Total
		{
			get { return _total; }
			set
			{
				if (_total != value)
				{
					_total = value;
					RaisePropertyChanged();
				}
			}
		}

		public string ToJson()
		{
			return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings { PreserveReferencesHandling = Newtonsoft.Json.PreserveReferencesHandling.All });
		}

		public static OrderItem2 FromJson(string data)
		{
			return Newtonsoft.Json.JsonConvert.DeserializeObject<OrderItem2>(data, new Newtonsoft.Json.JsonSerializerSettings { PreserveReferencesHandling = Newtonsoft.Json.PreserveReferencesHandling.All });
		}

		public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;

		protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
		{
			var handler = PropertyChanged;
			if (handler != null)
				handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
		}

	}

	[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.46.0 (Newtonsoft.Json v9.0.0.0)")]
	public partial class OrderItem : OrderItem2, System.ComponentModel.INotifyPropertyChanged
	{
		private System.Guid _id;

		[Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public System.Guid Id
		{
			get { return _id; }
			set
			{
				if (_id != value)
				{
					_id = value;
					RaisePropertyChanged();
				}
			}
		}

		public string ToJson()
		{
			return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings { PreserveReferencesHandling = Newtonsoft.Json.PreserveReferencesHandling.All });
		}

		public static OrderItem FromJson(string data)
		{
			return Newtonsoft.Json.JsonConvert.DeserializeObject<OrderItem>(data, new Newtonsoft.Json.JsonSerializerSettings { PreserveReferencesHandling = Newtonsoft.Json.PreserveReferencesHandling.All });
		}

		public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;

		protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
		{
			var handler = PropertyChanged;
			if (handler != null)
				handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
		}

	}

	[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.46.0 (Newtonsoft.Json v9.0.0.0)")]
	public partial class Command : OrderDetails2, System.ComponentModel.INotifyPropertyChanged
	{
		private System.Collections.ObjectModel.ObservableCollection<OrderItem2> _items;

		/// <summary>订单项目列表</summary>
		[Newtonsoft.Json.JsonProperty("items", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public System.Collections.ObjectModel.ObservableCollection<OrderItem2> Items
		{
			get { return _items; }
			set
			{
				if (_items != value)
				{
					_items = value;
					RaisePropertyChanged();
				}
			}
		}

		public string ToJson()
		{
			return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings { PreserveReferencesHandling = Newtonsoft.Json.PreserveReferencesHandling.All });
		}

		public static Command FromJson(string data)
		{
			return Newtonsoft.Json.JsonConvert.DeserializeObject<Command>(data, new Newtonsoft.Json.JsonSerializerSettings { PreserveReferencesHandling = Newtonsoft.Json.PreserveReferencesHandling.All });
		}

		public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;

		protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
		{
			var handler = PropertyChanged;
			if (handler != null)
				handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
		}

	}

	/// <summary>从哪里听说数据列表</summary>
	[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.46.0 (Newtonsoft.Json v9.0.0.0)")]
	public partial class Response2 : System.ComponentModel.INotifyPropertyChanged
	{
		private long _count;
		private int? _pageIndex;
		private int? _pageSize;
		private System.Collections.ObjectModel.ObservableCollection<HearFromDetails> _data;

		/// <summary>总行数</summary>
		[Newtonsoft.Json.JsonProperty("count", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public long Count
		{
			get { return _count; }
			set
			{
				if (_count != value)
				{
					_count = value;
					RaisePropertyChanged();
				}
			}
		}

		/// <summary>当前页号</summary>
		[Newtonsoft.Json.JsonProperty("pageIndex", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public int? PageIndex
		{
			get { return _pageIndex; }
			set
			{
				if (_pageIndex != value)
				{
					_pageIndex = value;
					RaisePropertyChanged();
				}
			}
		}

		/// <summary>每页行数</summary>
		[Newtonsoft.Json.JsonProperty("pageSize", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public int? PageSize
		{
			get { return _pageSize; }
			set
			{
				if (_pageSize != value)
				{
					_pageSize = value;
					RaisePropertyChanged();
				}
			}
		}

		/// <summary>从哪里听说列表</summary>
		[Newtonsoft.Json.JsonProperty("data", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public System.Collections.ObjectModel.ObservableCollection<HearFromDetails> Data
		{
			get { return _data; }
			set
			{
				if (_data != value)
				{
					_data = value;
					RaisePropertyChanged();
				}
			}
		}

		public string ToJson()
		{
			return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings { PreserveReferencesHandling = Newtonsoft.Json.PreserveReferencesHandling.All });
		}

		public static Response2 FromJson(string data)
		{
			return Newtonsoft.Json.JsonConvert.DeserializeObject<Response2>(data, new Newtonsoft.Json.JsonSerializerSettings { PreserveReferencesHandling = Newtonsoft.Json.PreserveReferencesHandling.All });
		}

		public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;

		protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
		{
			var handler = PropertyChanged;
			if (handler != null)
				handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
		}

	}

	/// <summary>从哪里听说</summary>
	[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.46.0 (Newtonsoft.Json v9.0.0.0)")]
	public partial class HearFromDetails : System.ComponentModel.INotifyPropertyChanged
	{
		private System.Guid _id;
		private string _name;

		/// <summary>ID</summary>
		[Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public System.Guid Id
		{
			get { return _id; }
			set
			{
				if (_id != value)
				{
					_id = value;
					RaisePropertyChanged();
				}
			}
		}

		/// <summary>名称</summary>
		[Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public string Name
		{
			get { return _name; }
			set
			{
				if (_name != value)
				{
					_name = value;
					RaisePropertyChanged();
				}
			}
		}

		public string ToJson()
		{
			return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings { PreserveReferencesHandling = Newtonsoft.Json.PreserveReferencesHandling.All });
		}

		public static HearFromDetails FromJson(string data)
		{
			return Newtonsoft.Json.JsonConvert.DeserializeObject<HearFromDetails>(data, new Newtonsoft.Json.JsonSerializerSettings { PreserveReferencesHandling = Newtonsoft.Json.PreserveReferencesHandling.All });
		}

		public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;

		protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
		{
			var handler = PropertyChanged;
			if (handler != null)
				handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
		}

	}

	[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.46.0 (Newtonsoft.Json v9.0.0.0)")]
	public partial class Command2 : HearFromDetails, System.ComponentModel.INotifyPropertyChanged
	{

		public string ToJson()
		{
			return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings { PreserveReferencesHandling = Newtonsoft.Json.PreserveReferencesHandling.All });
		}

		public static Command2 FromJson(string data)
		{
			return Newtonsoft.Json.JsonConvert.DeserializeObject<Command2>(data, new Newtonsoft.Json.JsonSerializerSettings { PreserveReferencesHandling = Newtonsoft.Json.PreserveReferencesHandling.All });
		}

		public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;

		protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
		{
			var handler = PropertyChanged;
			if (handler != null)
				handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
		}

	}

	[System.CodeDom.Compiler.GeneratedCode("NSwag", "11.17.3.0 (NJsonSchema v9.10.46.0 (Newtonsoft.Json v9.0.0.0))")]
	public partial class SwaggerException : System.Exception
	{
		public int StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>> Headers { get; private set; }

		public SwaggerException(string message, int statusCode, string response, System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.Exception innerException)
			: base(message, innerException)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
		}

		public override string ToString()
		{
			return string.Format("HTTP Response: \n\n{0}\n\n{1}", Response, base.ToString());
		}
	}

	[System.CodeDom.Compiler.GeneratedCode("NSwag", "11.17.3.0 (NJsonSchema v9.10.46.0 (Newtonsoft.Json v9.0.0.0))")]
	public partial class SwaggerException<TResult> : SwaggerException
	{
		public TResult Result { get; private set; }

		public SwaggerException(string message, int statusCode, string response, System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>> headers, TResult result, System.Exception innerException)
			: base(message, statusCode, response, headers, innerException)
		{
			Result = result;
		}
	}

}